export interface IWithings {
    getRequestToken(cb: (err: any, token: string, tokenSecret: string) => any): void;
    getRequestTokenAsync(): Promise<any>;
    authorizeUrl(token: string, tokenSecret: string): string;
    getAccessToken(token: string, tokenSecret: string, verifier: string, cb: (err: any, token: string, tokenSecret: string) => any): void;
    getAccessTokenAsync(token: string, tokenSecret: string, verifier: string): Promise<any>;
    apiCall(url: string, method: string, cb: (err: any, data: any) => any): void;
    apiCallAsync(url: string, method: string, cb: any): Promise<any>;
    get(service: string, action: string, params: (err: any, data: any) => any, cb: any): void;
    getAsync(service: string, action: string, params: any): Promise<any>;
    post(service: string, action: string, params: (err: any, data: any) => any, cb: any): void;
    postAsync(service: string, action: string, params: any, cb: any): Promise<any>;
    getDailyActivity(date: string | Date, cb: (err: any, data: any) => any): void;
    getDailyActivityAsync(date: string | Date): Promise<any>;
    getDailySteps(date: string | Date, cb: (err: any, data: any) => any): void;
    getDailyStepsAsync(date: string | Date): Promise<any>;
    getDailyCalories(date: string | Date, cb: (err: any, data: any) => any): void;
    getDailyCaloriesAsync(date: string | Date): Promise<any>;
    getMeasures(measType: number, startDate: string | Date, endDate: string | Date, cb: (err: any, data: any) => any): void;
    getMeasuresAsync(measType: number, startDate: string | Date, endDate: string | Date): Promise<any>;
    getWeightMeasures(startDate: string | Date, endDate: string | Date, cb: (err: any, data: any) => any): void;
    getWeightMeasuresAsync(startDate: string | Date, endDate: string | Date): Promise<any>;
    getPulseMeasures(startDate: string | Date, endDate: string | Date, cb: (err: any, data: any) => any): void;
    getPulseMeasuresAsync(startDate: string | Date, endDate: string | Date): Promise<any>;
    getSleepSummary(startDate: string | Date, endDate: string | Date, cb: (err: any, data: any) => any): void;
    getSleepSummaryAsync(startDate: string | Date, endDate: string | Date): Promise<any>;
    createNotification(callbackUrl: string, comment: string, appli: number, cb: (err: any, data: any) => any): void;
    createNotificationAsync(callbackUrl: string, comment: string, appli: number): Promise<any>;
    getNotification(callbackUrl: string, appli: number, cb: (err: any, data: any) => any): void;
    getNotificationAsync(callbackUrl: string, appli: number): Promise<any>;
    listNotifications(appli: number, cb: (err: any, data: any) => any): void;
    listNotificationsAsync(appli: number): Promise<any>;
    revokeNotification(callbackUrl: string, appli: number, cb: (err: any, data: any) => any): void;
    revokeNotificationAsync(callbackUrl: string, appli: number): Promise<any>;
}
export interface WhitingsOptionModel {
    consumerKey: string;
    consumerSecret: string;
    callbackUrl?: string;
    accessToken?: string;
    accessTokenSecret?: string;
    userID?: string;
}
export declare class Withings implements IWithings {
    private config;
    static requestToken: string;
    static accessToken: string;
    static authorize: string;
    private accessToken;
    private accessTokenSecret;
    private userID;
    private oauth;
    constructor(config: WhitingsOptionModel);
    getRequestToken(cb: any): void;
    getRequestTokenAsync(): Promise<any>;
    authorizeUrl(token: string, tokenSecret: string): string;
    getAccessToken(token: any, tokenSecret: any, verifier: any, cb: any): void;
    getAccessTokenAsync(token: any, tokenSecret: any, verifier: any): Promise<any>;
    apiCall(url: string, method: string, cb: any): void;
    apiCallAsync(url: string, method: string, cb: any): Promise<any>;
    get(service: string, action: string, params: any, cb: any): void;
    getAsync(service: string, action: string, params: any): Promise<any>;
    post(service: string, action: string, params: any, cb: any): void;
    postAsync(service: string, action: string, params: any, cb: any): Promise<any>;
    getDailyActivity(date: string | Date, cb: any): void;
    getDailyActivityAsync(date: string | Date): Promise<any>;
    getDailySteps(date: string | Date, cb: any): void;
    getDailyStepsAsync(date: string | Date): Promise<any>;
    getDailyCalories(date: string | Date, cb: any): void;
    getDailyCaloriesAsync(date: string | Date): Promise<any>;
    getMeasures(measType: number, startDate: string | Date, endDate: string | Date, cb: any): void;
    getMeasuresAsync(measType: number, startDate: string | Date, endDate: string | Date): Promise<any>;
    getWeightMeasures(startDate: string | Date, endDate: string | Date, cb: any): void;
    getWeightMeasuresAsync(startDate: string | Date, endDate: string | Date): Promise<any>;
    getPulseMeasures(startDate: string | Date, endDate: string | Date, cb: any): void;
    getPulseMeasuresAsync(startDate: string | Date, endDate: string | Date): Promise<any>;
    getSleepSummary(startDate: string | Date, endDate: string | Date, cb: any): void;
    getSleepSummaryAsync(startDate: string | Date, endDate: string | Date): Promise<any>;
    createNotification(callbackUrl: string, comment: string, appli: number, cb: any): void;
    createNotificationAsync(callbackUrl: string, comment: string, appli: number): Promise<any>;
    getNotification(callbackUrl: string, appli: number, cb: any): void;
    getNotificationAsync(callbackUrl: string, appli: number): Promise<any>;
    listNotifications(appli: number, cb: any): void;
    listNotificationsAsync(appli: number): Promise<any>;
    revokeNotification(callbackUrl: string, appli: number, cb: any): void;
    revokeNotificationAsync(callbackUrl: string, appli: number): Promise<any>;
}
